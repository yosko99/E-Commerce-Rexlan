import ProductSwatches from './product/ProductSwatches.component';
import { categoryListAction } from '../actions/categoryActions';
import ProductSizes from './product/ProductSizes.component';
import { useNavigate, useParams } from 'react-router-dom';
import { useDispatch, useSelector } from 'react-redux';
import React, { useEffect, useState, useRef } from 'react';
import Loading from './Loading.component';
import { Button } from 'react-bootstrap';
import { productListFilteredAction } from '../actions/productActions';

const Filter = () => {
  const navigate = useNavigate();
  const dispatch = useDispatch();
  const { subcategory: subcategoryURL } = useParams();
  const defaultGenderValue = subcategoryURL.split('-');
  const url = `/products/category/${subcategoryURL}`;

  const { categories, loading: categoryLoading } = useSelector((state) => state.categoryList);
  const { products } = useSelector((state) => state.productListFiltered);

  // Change main category depending on gender
  const [genderRadioState, setGenderRadioState] = useState(defaultGenderValue[0]);

  const genderHandler = (e) => {
    const selectedGender = e.target.id;
    setGenderRadioState(selectedGender);
  };

  // Change subcategory route depending on clicked button
  const [subcategoryRadioState, setSubcategoryRadioState] = useState(subcategoryURL);
  const subcategoryHandler = (e) => {
    const selectedSubcategory = e.target.id;
    navigate('/products/category/' + selectedSubcategory);

    setSubcategoryRadioState(selectedSubcategory);
  };

  // Resets value to 0 and gets max price of products
  const [currentValueState, setCurrentValueState] = useState(0);
  const [maxValueState, setMaxValueState] = useState(0);

  const setSliderValue = () => {
    setCurrentValueState(stripQueryFromUrl('price') || 0);
    const maximumPrice = Math.max.apply(Math, products.map(product => product.price));
    setMaxValueState(maximumPrice);
  };

  // Used to get current slider value
  const priceHandler = (e) => {
    setCurrentValueState(e.target.value);
  };

  // Get unique swatches
  const [swatchesState, setSwatchesState] = useState([]);

  const swatchHandler = () => {
    const swatches = [];
    const swatchesSet = new Set();

    products.forEach((product) => {
      product.image_groups.forEach((group) => {
        if (group.view_type === 'swatch' && group.variation_value !== undefined) {
          if (!swatches.includes(group.variation_value)) {
            swatches.push(group.variation_value);
            swatchesSet.add(group);
          }
        }
      });
    });

    setSwatchesState(Array.from(swatchesSet));
  };

  // Get unique sizes
  const [sizesState, setSizesState] = useState([]);

  const sizeHandler = () => {
    const sizes = [];
    const sizesSet = new Set();

    products.forEach((product) => {
      const isSizeAvailable = product.variation_attributes.find((attr) => attr.id === 'size');
      if (isSizeAvailable !== undefined) {
        isSizeAvailable.values.forEach((size) => {
          if (!sizes.includes(size.name)) {
            sizes.push(size.name);
            sizesSet.add(size);
          }
        });
      }
    });

    setSizesState(Array.from(sizesSet));
  };

  // Gets url generated by form when seleting some of the attributes
  const filterFormRef = useRef();

  const getFormSubmitUrl = () => {
    const formData = new FormData(filterFormRef.current);
    const search = new URLSearchParams(formData);
    const queryString = search.toString();
    navigate(`${url}?${queryString}`);

    return queryString;
  };

  // Get attr query from url if it is any.
  const colorsRef = useRef([]);
  const sizesRef = useRef([]);

  // Strip query parameters from url depending on passed attribute and return array of items
  const stripQueryFromUrl = (attr) => {
    const regEx = new RegExp(attr);
    const attributes = [];

    const search = window.location.search.split(regEx);
    search.forEach((a) => {
      if (a[0] === '=') {
        const temp = a.split('&')[0];
        attributes.push(temp.substring(1));
      }
    });
    return attributes;
  };

  useEffect(() => {
    setSliderValue();
    swatchHandler();
    sizeHandler();
  }, [products]);

  useEffect(() => {
    dispatch(categoryListAction());

    colorsRef.current = stripQueryFromUrl('color');
    sizesRef.current = stripQueryFromUrl('size');
  }, []);

  return (
    <>
    <small className='mb-2'>Refine by</small>

    <h6 className='mt-3'>Category</h6>
    {categoryLoading || categoryLoading === undefined
      ? <Loading height='10vh'/>
      : categories.map((category, index) => (
      <div className="form-check" key={index + 1}>
        <input
          className="form-check-input"
          onChange={(e) => genderHandler(e)}
          checked={genderRadioState === category.name.toLowerCase()}
          type="radio"
          id={category.name.toLowerCase()}/>
        <label className="form-check-label fs-5">{category.name}</label>
      </div>
      ))
    }

    <h6 className='mt-4'>Subcategory</h6>
    {categoryLoading || categoryLoading === undefined
      ? <Loading height='10vh'/>
      : categories.find((category) => category.name.toLowerCase() === genderRadioState)
        .categories.map((subcategory) =>
          (subcategory.categories.map((category, index) =>
            (<div className="form-check" key={index + 1}>
            <input
              className="form-check-input my-2"
              onChange={(e) => subcategoryHandler(e)}
              checked={subcategoryRadioState === category.id}
              type="radio"
              id={category.id}/>
            <label className="form-check-label fs-5">{category.name}</label>
          </div>))))}

    <form
      method="get"
      ref={filterFormRef}
      onChange={getFormSubmitUrl}
      onSubmit={(e) => { e.preventDefault(); dispatch(productListFilteredAction(subcategoryURL, getFormSubmitUrl())); }}>
      <div>
          <h6 className='mt-4'>Price: {currentValueState} USD</h6>
          <input
            type="range"
            min='0'
            name="price"
            max={maxValueState}
            value={currentValueState}
            onChange={(e) => priceHandler(e)}
            className="form-range"/>
      </div>
      <h6 className='mt-4'>Colors</h6>
      { swatchesState.length > 0
        ? swatchesState.map((swatch, index) =>
          (<ProductSwatches
            key={index + 1}
            swatch={swatch}
            isChecked={colorsRef.current.includes(swatch.variation_value)}
            />))
        : <Button
            className='my-2 me-2'
            variant="outline-dark"
            disabled>
              -
          </Button>
      }
      <h6 className='mt-4'>Sizes</h6>
      {sizesState.length > 0
        ? sizesState.map((size, index) =>
          (<ProductSizes
            key={index + 1}
            isPressed={sizesRef.current.includes(size.value)}
            size={size} />))
        : <Button
            className='my-2 me-2'
            variant="outline-dark"
            disabled>
              -
          </Button>}

          <div className='mt-4'>
            <Button variant="info" type='submit'>Filter products</Button>
          </div>
    </form>
    </>

  );
};

export default Filter;
